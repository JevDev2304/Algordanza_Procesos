# -*- coding: utf-8 -*-
"""Algordanza.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-OjQBU2L7wL-26asQd0jC0OoBmnB4VAe
"""

from datetime import datetime
import pandas as pd
from openpyxl import Workbook
from Convirtiendo_string_productos_a_productos import pasar_str_productos_a_dict


class Diamante:
    TAMANOS = {0.2: "0.2", 0.3: "0,3", 0.4: "0,4", 0.5: "0,5", 0.6: "0,6", 0.7: "0,7", 0.8: "0,8", 0.9: "0,9", 1: "1"}
    ORIGEN = ["Mascota", "Cabello", "Cenizas"]

    def __init__(self, tamano: float, grabado_laser: bool, origen: str):
        self.tamano = tamano
        self.grabado = grabado_laser
        self.origen = origen

    def __str__(self):
        return (
            f"El tamaño del Diamante es {self.tamano} \nEl grabado del Diamante es {self.grabado} \nEl origen del "
            f"diamante es {self.origen} \n\n")


class DiamanteCorte(Diamante):
    CORTES: list = ["Brillante", "Esmeralda", "Asscher", "Princesa", "Radiante", "Corazon"]

    def __init__(self, corte: str, tamano, grabado_laser, origen):
        super().__init__(tamano, grabado_laser, origen)
        self.corte = corte

    def __str__(self):
        return (
            f"El tamaño del Diamante es {self.tamano} \nEl grabado del Diamante es {self.grabado} \nEl origen del "
            f"diamante es {self.origen} \nEl corte del diamante es {self.corte} \n\n")


class Cliente:
    def __str__(self):
        return self.nombre

    id = 0

    def __init__(self, nombre: str, celular: str, correo: str, ciudad: str):
        Cliente.id += 1
        self.id = Cliente.id
        self.nombre = nombre
        self.celular = celular
        self.correo = correo
        self.ciudad = ciudad


class Productos:

    def __init__(self):
        self.listadeDiamantes = []

    def __str__(self):
        return str(self.listadeDiamantes)

    def agregar_productos_a_lista(self):
        condicional_ciclo = int(input(
            "Ingrese 1 si desea ingresar Diamante\nIngrese 0 si no desea ingresar más Diamantes\nIngrese la respuesta: "))
        while condicional_ciclo == 1:
            tiene_corte = int(input(
                "Ingrese 1 si el diamante tiene corte\nIngrese 0 si el diamante no tiene corte\nIngrese la Respuesta: "))
            if tiene_corte == 1:
                corte = str(input("Cual es el corte del Diamante?"))
                tamano = str(input("Cual es el tamaño del Diamante?"))
                grabado_laser = bool(input("Tiene grabado el Diamante?"))
                origen = str(input("Cual es el origen del Diamante?"))
                self.agregar_diamante_con_corte_a_lista_productos(corte, tamano, grabado_laser, origen)
                condicional_ciclo = int(input(
                    "Ingrese 1 si desea ingresar Diamante\nIngrese 0 si no desea ingresar más Diamantes\nIngrese la "
                    "respuesta: "))
            elif tiene_corte == 0:
                tamano = str(input("Cual es el tamaño del Diamante?"))
                grabado_laser = bool(input("Tiene grabado el Diamante?"))
                origen = str(input("Cual es el origen del Diamante?"))
                self.agregar_diamante_sin_corte_a_lista_productos(tamano, grabado_laser, origen)
                condicional_ciclo = int(input(
                    "Ingrese 1 si desea ingresar Diamante\nIngrese 0 si no desea ingresar más Diamantes\nIngrese la respuesta: "))

    def agregar_diamante_sin_corte_a_lista_productos(self, tamano, grabado, origen):
        if (grabado == "si"):
            grabado= True
        elif (grabado =="no"):
            grabado = False
        diamante = Diamante(tamano, grabado, origen)
        self.listadeDiamantes.append(diamante)

    def agregar_diamante_con_corte_a_lista_productos(self, corte, tamano, grabado_laser, origen):
        if (grabado_laser == "si"):
            grabado_laser= True
        elif (grabado_laser =="no"):
            grabado_laser = False

        diamante_con_corte = DiamanteCorte(corte, tamano, grabado_laser, origen)
        self.listadeDiamantes.append(diamante_con_corte)


class Pedido:
    id = 0

    def __init__(self, cliente: Cliente, fecha: datetime.date, productos: Productos):
        Pedido.id += 1
        self.id = Pedido.id
        self.cliente = cliente
        self.fecha = fecha
        self.productos = productos
        self.activo: bool = True

    def __str__(self):
        return (
            f"El id del pedido es {self.id}\nEl nombre del cliente es {self.cliente}\nLa fecha del pedido es {self.fecha}\nLa lista del productos es {self.productos}\nEl estado del pedido es {self.activo}")


class Algordanza:
    def __init__(self):
        self.diccionariodepedidos: dict[Pedido] = {}
        self.listadeclientes: list[Cliente] = []
        self.producto:Productos=Productos()

    def registrar_cliente(self, nombre: str, celular: str, correo: str, ciudad: str):
        try:
            cliente = Cliente(nombre, celular, correo, ciudad)
            if cliente not in self.listadeclientes:
                self.listadeclientes.append(cliente)
            elif cliente in self.listadeclientes:
                raise Exception("El cliente ya se encuentra registrado.")
        except Exception as error:
            raise error







    def obtener_id_cliente(self, nombre):
        lista_clientes_nr = []
        for cliente in self.listadeclientes:
            if cliente.nombre == nombre:
                lista_clientes_nr.append(cliente)

        for cliente_repetido in lista_clientes_nr:
            print(
                f"La ciudad del cliente es {cliente_repetido.ciudad}\nEl correo del cliente es {cliente_repetido.correo}\nEl id del cliente es {cliente_repetido.id}\n\n")

    def obtener_cliente_por_id(self, id: int):
        cliente_retornar=None
        for cliente in self.listadeclientes:
            if cliente.id == id:
                cliente_retornar = cliente

        return cliente_retornar


    def eliminar_cliente_por_id(self, id):
        existe=False
        for cliente in self.listadeclientes:
            if cliente.id == id:
                self.listadeclientes.remove(cliente)
                existe=True



    def pasar_str_a_datetime(self, fecha):
        fecha_string = datetime.strptime(fecha, "%d/%m/%Y")
        fecha_string=fecha_string.strftime("%d/%m/%Y")
        return fecha_string

    def registrar_pedido(self, id_cliente: str, fecha: str,productos:Productos):
        cliente = self.obtener_cliente_por_id(int(id_cliente))
        fecha_datetime = self.pasar_str_a_datetime(fecha)
        productos=productos
        pedido=Pedido(cliente,fecha_datetime,productos)
        self.diccionariodepedidos[pedido] = pedido.fecha

    def guardar_info_clientes_excel(self):
        lista_info_clientes=self.listadeclientes
        book = Workbook()
        sheet = book.active
        sheet["A1"] = "Nombre"
        sheet["B1"] = "Id"
        sheet["C1"] = "Correo"
        sheet["D1"] = "Ciudad"
        sheet["E1"] = "Celular"
        contador = 1
        for cliente in lista_info_clientes:
            contador += 1
            sheet[f"A{contador}"] = cliente.nombre
            sheet[f"B{contador}"] = cliente.id
            sheet[f"C{contador}"] = cliente.correo
            sheet[f"D{contador}"] = cliente.ciudad
            sheet[f"E{contador}"] = cliente.celular

        diccionario_pedidos = self.diccionariodepedidos
        sheet2 = book.create_sheet("Pedidos")
        sheet2["A1"] = "Id_cliente"
        sheet2["B1"] = "Id_Pedido"
        sheet2["C1"] = "Productos"
        sheet2["D1"] = "Fecha"
        lista_id_pedidos = []
        lista_id_clientes = []
        lista_productos = []
        lista_productos_str = []
        lista_fechas = []
        for pedido in list(diccionario_pedidos.keys()):
            lista_id_pedidos.append(pedido.id)
            lista_id_clientes.append(pedido.cliente.id)
            lista_productos.append(pedido.productos)
        for fecha in list(diccionario_pedidos.values()):
            lista_fechas.append(str(fecha))
        for producto in lista_productos:
            str_lista = ""
            for diamante in producto.listadeDiamantes:
                str_lista += f"{str(diamante)}"
            lista_productos_str.append(str_lista)

        contador_id_cliente = 1
        contador_id_pedidos = 1
        contador_fechas = 1
        contador_productos = 1

        for id_cliente in lista_id_clientes:
            contador_id_cliente += 1
            sheet2[f"A{contador_id_cliente}"] = id_cliente
        for id_pedido in lista_id_pedidos:
            contador_id_pedidos += 1
            sheet2[f"B{contador_id_pedidos}"] = id_pedido
        for producto_str in lista_productos_str:

            contador_productos += 1
            sheet2[f"C{contador_productos}"] = producto_str
        for fecha in lista_fechas:
            contador_fechas += 1
            sheet2[f"D{contador_fechas}"] = fecha
        book.save(".Base_Datos.xlsx")
        book.save("Editable.xlsx")
        book.close()






    def cargar_info_excel_clientes(self):
        df_clientes = pd.read_excel(r".Base_Datos.xlsx", index_col="Id")
        diccionario = df_clientes.to_dict()

        diccionario_id_nombre=diccionario["Nombre"]
        diccionario_id_correo = diccionario["Correo"]
        diccionario_id_ciudad = diccionario["Ciudad"]
        diccionario_id_celular= diccionario["Celular"]
        lista_de_nombres=list(diccionario_id_nombre.values())
        lista_de_id=list(diccionario_id_nombre.keys())
        lista_de_correo=list(diccionario_id_correo.values())
        lista_de_ciudad=list(diccionario_id_ciudad.values())
        lista_de_celular=list(diccionario_id_celular.values())
        for i in range (len(lista_de_nombres)):
            self.registrar_cliente(lista_de_nombres[i],lista_de_celular[i],lista_de_correo[i],lista_de_ciudad[i])
        df_pedidos= pd.read_excel(r".Base_Datos.xlsx", index_col="Id_Pedido", sheet_name="Pedidos")
        diccionario_2= df_pedidos.to_dict()
        diccionario_id_clientes =diccionario_2["Id_cliente"]
        diccionario_productos =diccionario_2["Productos"]
        diccionario_fecha = diccionario_2["Fecha"]
        lista_id_clientes=list(diccionario_id_clientes.values())
        lista_fechas=list(diccionario_fecha.values())
        lista_str_productos=list(diccionario_productos.values())
        lista_organizada_solovalores=[]
        lista_productos_objeto=[]
        for productos in lista_str_productos:
            lista_organizada_solovalores.append(pasar_str_productos_a_dict(productos))

        for pedido in lista_organizada_solovalores:
            producto = Productos()
            lista_diamantes_brutos=pedido["Diamantes_Bruto"]
            lista_diamantes_cortes=pedido["diamante_corte"]
            for lista_diamante_bruto in lista_diamantes_brutos:
                tamano=float(lista_diamante_bruto[0].strip())
                grabado=bool(lista_diamante_bruto[1].strip())
                origen=str(lista_diamante_bruto[2].strip())
                producto.agregar_diamante_sin_corte_a_lista_productos(tamano,grabado,origen)
            for lista_diamante_corte in lista_diamantes_cortes:
                tamano=float(lista_diamante_corte[0].strip())
                grabado=bool(lista_diamante_corte[1].strip())
                origen=str(lista_diamante_corte[2].strip())
                corte=str(lista_diamante_corte[3].strip())
                producto.agregar_diamante_con_corte_a_lista_productos(corte,tamano,grabado,origen)
            lista_productos_objeto.append(producto)

        for i in range (len(lista_id_clientes)):
            fecha=self.pasar_str_a_datetime(lista_fechas[i])
            cliente=self.obtener_cliente_por_id(lista_id_clientes[i])
            productos=lista_productos_objeto[i]
            pedido=Pedido(cliente,fecha,productos)
            self.diccionariodepedidos[pedido] = pedido.fecha

    def crear_productos(self):
        productos=Productos()
        return productos
    def crear_dimante_corte(self,corte,tamano,grabado,origen):
        if grabado =="si":
            grabado = True
        elif grabado == "no":
            grabado = False

        diamante_corte=DiamanteCorte(corte,tamano,grabado,origen)
        return diamante_corte
    def eliminar_pedido(self,id_pedido):
            existe=False
            for pedido in list(self.diccionariodepedidos.keys()):
                if pedido.id == id_pedido:
                    del self.diccionariodepedidos[pedido]
                    existe=True
            if existe == False:
                raise Exception("No se encontro el pedido por ID")







































